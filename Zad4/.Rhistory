labels <- round(dane[,2]/sum(dane[,2]) * 100, 1)
labels <- paste(labels, "%", sep="")
pie(dane[,2], radius = 1, col = rainbow(length(dane[,2])),
labels = labels)
legend(1.6, 0.8, dane[,1], cex=0.8, fill=rainbow(length(dane[,2])))
#wykres wachlarzowy
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
percentage <- table(smartfony$ocena) / length(smartfony$ocena)
fan.plot(percentage, labels = names(percentage), main = "Procentowy udział oceny")
#n)
new_column <- ifelse(smartfony$ocena>100,'więcej 100 opinii',
ifelse(smartfony$ocena>=50, '50-100 opinii',
ifelse(smartfony$ocena>0, 'mniej 50 opinii', 'nie ma')))
smartfony['status_opinii'] <- new_column
head(smartfony)
new_column
#n)
new_column <- ifelse(smartfony$liczba_opinii>100,'więcej 100 opinii',
ifelse(smartfony$liczba_opinii>=50, '50-100 opinii',
ifelse(smartfony$liczba_opinii>0, 'mniej 50 opinii', 'nie ma')))
smartfony['status_opinii'] <- new_column
new_column
head(smartfony)
#wykres kołowy
dane <- aggregate(smartfony$status_opinii, list(smartfony$nazwy), sum)
pie(smartfony$status_opinii, radius = 1, col = rainbow(length(smartfony$status_opinii)))
pie(smartfony$status_opinii.freq, radius = 1, col = rainbow(length(smartfony$status_opinii)))
smartfony$status_opinii.freq
smartfony$status_opinii
library(MASS)
painters
type(painters$school)
??type
typeof(painters$school)
typeof(painters$School)
smartfony['status_opinii'] <- factor(new_column)
head(smartfony)
typeof(painters$School)
smartfony$status_opinii
smartfony$status_opinii.freq
table(smartfony$status_opinii)
pie(table(smartfony$status_opinii), radius = 1, col = rainbow(length(smartfony$status_opinii)))
#o)
for (smartfon in smartfony){
print(smartfon$nazwy)
}
#o)
for (i in 1:length(smartfony$nazwy)){
print(smartfony$nazwy[i])
}
smartfony$nazwy
smartfony$nazwy[1]
#o)
for (i in 1:length(smartfony$nazwy)){
print(smartfony$nazwy[i], "ma ocenę klientów", smartfony$ocena[i], 'bo ma liczbę opinii',
smartfony$liczba_opinii[i])
}
#o)
for (i in 1:length(smartfony$nazwy)){
print(smartfony$nazwy[i], 'ma ocenę klientów', smartfony$ocena[i], 'bo ma liczbę opinii',
smartfony$liczba_opinii[i])
}
#o)
for (i in 1:length(smartfony$nazwy)){
print(paste(smartfony$nazwy[i], 'ma ocenę klientów', smartfony$ocena[i], 'bo ma liczbę opinii',
smartfony$liczba_opinii[i]))
}
#p)
write.csv(smartfony, 'smartfony.csv')
dane <- read.csv('smartfony.csv')
dane
#i)
nazwy <- c('Samsung Galaxy S10+', 'Samsung Galaxy S10','Samsung Galaxy S10e',
'Samsung Galaxy S9+', 'Samsung Galaxy A7', 'Samsung Galaxy S8',
'Samsung Galaxy S9', 'Samsung Galaxy J4+', 'Samsung Galaxy J6+ ',
'Samsung Galaxy S8+')
wyswietlacz <- c('6,4 "', '6,1 "', '5,8 "', '6,2 "', '5,8 "', '6 "', '5,8 "',
'6 "', '6 "', ' 6,2 "')
pamiec_RAM <- c(8, 8, 6, 6, 4, 4, 4, 2, 3, 4)
pamiec_wbudowana <- c(128, 128, 128, 64, 64, 64, 64, 32, 32, 64)
aparat_foto <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
cena <- c(4399, 3949, 3299, 2899, 1399, 1999, 2599, 649, 849, 2299)
liczba_opinii <- c(1, 2, 0, 221, 29, 271, 60, 19, 105)
smartfony <- data.frame(nazwy, wyswietlacz, pamiec_RAM, pamiec_wbudowana,
aparat_foto, cena, liczba_opinii)
#i)
nazwy <- c('Samsung Galaxy S10+', 'Samsung Galaxy S10','Samsung Galaxy S10e',
'Samsung Galaxy S9+', 'Samsung Galaxy A7', 'Samsung Galaxy S8',
'Samsung Galaxy S9', 'Samsung Galaxy J4+', 'Samsung Galaxy J6+ ',
'Samsung Galaxy S8+')
wyswietlacz <- c('6,4 "', '6,1 "', '5,8 "', '6,2 "', '5,8 "', '6 "', '5,8 "',
'6 "', '6 "', ' 6,2 "')
pamiec_RAM <- c(8, 8, 6, 6, 4, 4, 4, 2, 3, 4)
pamiec_wbudowana <- c(128, 128, 128, 64, 64, 64, 64, 32, 32, 64)
aparat_foto <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
cena <- c(4399, 3949, 3299, 2899, 1399, 1999, 2599, 649, 849, 2299)
liczba_opinii <- c(1, 2, 0, 221, 29, 271, 60, 19, 105)
smartfony <- data.frame(nazwy, wyswietlacz, pamiec_RAM, pamiec_wbudowana,
aparat_foto, cena, liczba_opinii)
smartfony <- data.frame(nazwy, wyswietlacz, pamiec_RAM, pamiec_wbudowana,
aparat_foto, cena, liczba_opinii)
liczba_opinii <- c(1, 2, 0, 221, 29, 271, 60, 19, 9, 105)
smartfony <- data.frame(nazwy, wyswietlacz, pamiec_RAM, pamiec_wbudowana,
aparat_foto, cena, liczba_opinii)
mean(smartfony$cena)
smartfony$nazwy
#j)
newRow <- data.frame(nazwy = 'Samsung Galaxy Note9', wyswietlacz = '6,4 "', pamiec_RAM = 6,
pamiec_wbudowana = 128, aparat_foto = TRUE,
cena = 3899, liczba_opinii = 74)
smartfony <- rbind(smartfony, newRow)
mean(smartfony$cena)
#k)
smartfony$ocena <- c('5', '5', '0', '5', '5', '5', '5', '5', '5', '5', '5')
aggregate(smartfony$cena, list(smartfony$ocena), mean)
#l)
newRow <- data.frame(nazwy = 'Samsung Galaxy Xcover 4', wyswietlacz = '5 "',
pamiec_RAM = 2, pamiec_wbudowana = 16, aparat_foto = TRUE,
cena = 849, liczba_opinii = 71, ocena = 5)
smartfony <- rbind(smartfony, newRow)
smartfony$nazwy
newRow <- data.frame(nazwy = 'Samsung Galaxy A8', wyswietlacz = '5,6 "', pamiec_RAM = 4,
pamiec_wbudowana = 32, aparat_foto = TRUE,
cena = 1199, liczba_opinii = 88, ocena = 5)
smartfony <- rbind(smartfony, newRow)
smartfony$nazwy
newRow <- data.frame(nazwy = 'Samsung Galaxy A9', wyswietlacz = '6,3 "', pamiec_RAM = 6,
pamiec_wbudowana = 128, aparat_foto = TRUE,
cena = 2499, liczba_opinii = 14, ocena = 5)
smartfony <- rbind(smartfony, newRow)
newRow <- data.frame(nazwy = 'Samsung Galaxy J7', wyswietlacz = '5,5 "', pamiec_RAM = 3,
pamiec_wbudowana = 16, aparat_foto = TRUE,
cena = 799, liczba_opinii = 226, ocena = 5)
smartfony <- rbind(smartfony, newRow)
dane <- aggregate(smartfony$liczba_opinii, list(smartfony$ocena), sum)
barplot(dane[,2], names.arg = dane[,1], main = 'Liczba reprezentantów każdej z ocen')
#m)
#wykres kołowy
labels <- round(dane[,2]/sum(dane[,2]) * 100, 1)
labels <- paste(labels, "%", sep="")
pie(dane[,2], radius = 1, col = rainbow(length(dane[,2])),
labels = labels)
legend(1.6, 0.8, dane[,1], cex=0.8, fill=rainbow(length(dane[,2])))
#wykres wachlarzowy
install.packages("plotrix")
percentage <- table(smartfony$ocena) / length(smartfony$ocena)
fan.plot(percentage, labels = names(percentage), main = "Procentowy udział oceny")
#n)
new_column <- ifelse(smartfony$liczba_opinii>100,'więcej 100 opinii',
ifelse(smartfony$liczba_opinii>=50, '50-100 opinii',
ifelse(smartfony$liczba_opinii>0, 'mniej 50 opinii', 'nie ma')))
smartfony['status_opinii'] <- factor(new_column)
#wykres kołowy
pie(table(smartfony$status_opinii), radius = 1, col = rainbow(length(smartfony$status_opinii)))
#o)
for (i in 1:length(smartfony$nazwy)){
print(paste(smartfony$nazwy[i], 'ma ocenę klientów', smartfony$ocena[i], 'bo ma liczbę opinii',
smartfony$liczba_opinii[i]))
}
#p)
write.csv(smartfony, 'smartfony.csv')
dane <- read.csv('smartfony.csv')
mtcars
?gridExtra
?gridExtra-package
?grid.table
tableGrob(mtcars)
tableGrob(mtcars, rows = 1:10)
tableGrob(mtcars, rows = c(1:10))
grid.table()
grid.draw(tableGrob(head(mtcars, 10)))
g <- tableGrob(mtcars)
grid.arrange(g)
grid.draw
g <- tableGrob(mtcars)
grid.arrange(g)
grid.draw()
g <- tableGrob(mtcars)
grid.arrange(g)
############# ZADANIE 1 ############
#a)
a <- 2*exp(5)
b <- 2*a
max(a,b)
#b)
?sum()
#c)
a <- c(15:25)
sum(a)
#d)
??sum
#e)
setwd("C:/Users/Bernadka/Documents/studia - II stopień/APU")
a <- "smartfonySamsung"
write(a, file='pkt_e.csv')
rm(a)
a
a <- read.csv(file = 'pkt_e.csv', sep = ',')
a
#f)
install.packages("gridExtra")
library("gridExtra")
g <- tableGrob(mtcars)
grid.arrange(g)
#g)
a <- seq(100, 20, -4)
#h)
a <- c(9:5)
b <- c(11:16)
d <- c(b, a)
d
#i)
nazwy <- c('Samsung Galaxy S10+', 'Samsung Galaxy S10','Samsung Galaxy S10e',
'Samsung Galaxy S9+', 'Samsung Galaxy A7', 'Samsung Galaxy S8',
'Samsung Galaxy S9', 'Samsung Galaxy J4+', 'Samsung Galaxy J6+ ',
'Samsung Galaxy S8+')
wyswietlacz <- c('6,4 "', '6,1 "', '5,8 "', '6,2 "', '5,8 "', '6 "', '5,8 "',
'6 "', '6 "', ' 6,2 "')
pamiec_RAM <- c(8, 8, 6, 6, 4, 4, 4, 2, 3, 4)
pamiec_wbudowana <- c(128, 128, 128, 64, 64, 64, 64, 32, 32, 64)
aparat_foto <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
cena <- c(4399, 3949, 3299, 2899, 1399, 1999, 2599, 649, 849, 2299)
liczba_opinii <- c(1, 2, 0, 221, 29, 271, 60, 19, 9, 105)
smartfony <- data.frame(nazwy, wyswietlacz, pamiec_RAM, pamiec_wbudowana,
aparat_foto, cena, liczba_opinii)
mean(smartfony$cena)
#j)
newRow <- data.frame(nazwy = 'Samsung Galaxy Note9', wyswietlacz = '6,4 "', pamiec_RAM = 6,
pamiec_wbudowana = 128, aparat_foto = TRUE,
cena = 3899, liczba_opinii = 74)
smartfony <- rbind(smartfony, newRow)
mean(smartfony$cena)
#k)
smartfony$ocena <- c('5', '5', '0', '5', '5', '5', '5', '5', '5', '5', '5')
aggregate(smartfony$cena, list(smartfony$ocena), mean)
#l)
newRow <- data.frame(nazwy = 'Samsung Galaxy Xcover 4', wyswietlacz = '5 "',
pamiec_RAM = 2, pamiec_wbudowana = 16, aparat_foto = TRUE,
cena = 849, liczba_opinii = 71, ocena = 5)
smartfony <- rbind(smartfony, newRow)
newRow <- data.frame(nazwy = 'Samsung Galaxy A8', wyswietlacz = '5,6 "', pamiec_RAM = 4,
pamiec_wbudowana = 32, aparat_foto = TRUE,
cena = 1199, liczba_opinii = 88, ocena = 5)
smartfony <- rbind(smartfony, newRow)
newRow <- data.frame(nazwy = 'Samsung Galaxy A9', wyswietlacz = '6,3 "', pamiec_RAM = 6,
pamiec_wbudowana = 128, aparat_foto = TRUE,
cena = 2499, liczba_opinii = 14, ocena = 5)
smartfony <- rbind(smartfony, newRow)
newRow <- data.frame(nazwy = 'Samsung Galaxy J7', wyswietlacz = '5,5 "', pamiec_RAM = 3,
pamiec_wbudowana = 16, aparat_foto = TRUE,
cena = 799, liczba_opinii = 226, ocena = 5)
smartfony <- rbind(smartfony, newRow)
dane <- aggregate(smartfony$liczba_opinii, list(smartfony$ocena), sum)
barplot(dane[,2], names.arg = dane[,1], main = 'Liczba reprezentantów każdej z ocen')
#m)
#wykres kołowy
labels <- round(dane[,2]/sum(dane[,2]) * 100, 1)
labels <- paste(labels, "%", sep="")
pie(dane[,2], radius = 1, col = rainbow(length(dane[,2])),
labels = labels)
legend(1.6, 0.8, dane[,1], cex=0.8, fill=rainbow(length(dane[,2])))
#wykres wachlarzowy
install.packages("plotrix")
library(plotrix)
percentage <- table(smartfony$ocena) / length(smartfony$ocena)
fan.plot(percentage, labels = names(percentage), main = "Procentowy udział oceny")
#n)
new_column <- ifelse(smartfony$liczba_opinii>100,'więcej 100 opinii',
ifelse(smartfony$liczba_opinii>=50, '50-100 opinii',
ifelse(smartfony$liczba_opinii>0, 'mniej 50 opinii', 'nie ma')))
smartfony['status_opinii'] <- factor(new_column)
#wykres kołowy
pie(table(smartfony$status_opinii), radius = 1, col = rainbow(length(smartfony$status_opinii)))
#o)
for (i in 1:length(smartfony$nazwy)){
print(paste(smartfony$nazwy[i], 'ma ocenę klientów', smartfony$ocena[i], 'bo ma liczbę opinii',
smartfony$liczba_opinii[i]))
}
#p)
write.csv(smartfony, 'smartfony.csv')
dane <- read.csv('smartfony.csv')
install.packages('ahp')
load('ahp')
library('ahp')
?sum()
??sum()
?aggregate
?factor
brary("gridExtra")
g <- tableGrob(mtcars)
gr
library("gridExtra")
g <- tableGrob(mtcars)
grid.arrange(g)
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 100))
input <- output^3 + 2*output
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(6, 10, 5), threshold = 0.01)
plot(net.price)
net.price$err.fct()
library("c50")
install.packages("c50")
install.packages('c50')
install.packages('C50')
library("C50")
data(churn)
churnTrain
treeModel <- c5.0(x=churnTrain[,-20], y=churnTrain$churn)
treeModel <- C5.0(x=churnTrain[,-20], y=churnTrain$churn)
treeModel
#summary(treeModel)
#ruleModel <- c5.0(churn - ., data = churnTrain, rules = TRUE) #alternatywna składnia
#ruleModel
#summary(ruleModel)
plot(treeModel)
head(churnTrain)
??max
data(Titanic)
Titanic
head(Titanic)
Titanic
#summary(treeModel)
ruleModel <- c5.0(Survived - ., data = Titanic, rules = TRUE) #alternatywna składnia
#summary(treeModel)
ruleModel <- C5.0(Survived - ., data = Titanic, rules = TRUE) #alternatywna składnia
Titanic
treeModel <- C5.0(x=Titanic[,-2], y=Titanic$Survived)
?runif
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 100))
input <- output^3 + 2*output
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
trainingData
data(iris)
head(iris)
library("C50")
data(Aids2)
head(Aids2)
library("MASS")
data(Aids2)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
Aids2$state
head(Aids2)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-1], y=Aids2$state)
plot(treeModel)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
plot(treeModel)
treeModel <- C5.0(x=Aids2[,-5], y=Aids2$status)
plot(treeModel)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
plot(treeModel)
head(Aids2)
summary(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(6, 10, 5), threshold = 0.01)
plot(net.price)
View(output)
View(output)
output
View(input)
View(input)
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(4, 7, 3), threshold = 0.01)
plot(net.price)
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(4, 7, 3), threshold = 0.01)
plot(net.price)
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(4, 7, 3), threshold = 0.01)
plot(net.price)
trainingData
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {}
return ((x - min(x)) / (max(x) - min(x)))
return ((x - min(x)) / (max(x) - min(x)))
}
normalize <- function(x) {}
return ((x - min(x)) / (max(x) - min(x)))
}
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {}
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(4, 7, 3), threshold = 0.01)
plot(net.price)
library("neuralnet")
output <- as.data.frame(runif(50, min = 1, max = 10))
input <- log(output^2)
trainingData <- cbind(input, output)
colnames(trainingData) <- c("Input", "Output")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(trainingData, normalize))
net.price <- neuralnet(Output~Input, maxmindf, hidden = c(4, 7, 3), threshold = 0.01)
plot(net.price)
library(ahp)
library(ahp)
library(ahp)
library(data.tree)
setwd("C:/Users/Bernadka/Desktop/APU Artur/2")
treeAhp <- Load("tree_design.yml")
print(treeAhp, filterFun = isNotLeaf)
Calculate(treeAhp)
print(treeAhp, priority = function(x) x$parent$priority["Total", x$name])
Visualize(treeAhp)
Analyze(treeAhp)
AnalyzeTable(treeAhp)
library(ahp)
library(data.tree)
setwd("C:/Users/Bernadka/Desktop/APU Artur/2")
treeAhp <- Load("tree_design.yml")
print(treeAhp, filterFun = isNotLeaf)
Calculate(treeAhp)
print(treeAhp, priority = function(x) x$parent$priority["Total", x$name])
library(ahp)
library(data.tree)
setwd("C:/Users/Bernadka/Desktop/APU Artur/2")
treeAhp <- Load("tree_design.yml")
print(treeAhp, filterFun = isNotLeaf)
Calculate(treeAhp)
print(treeAhp, priority = function(x) x$parent$priority["Total", x$name])
Visualize(treeAhp)
Analyze(treeAhp)
AnalyzeTable(treeAhp)
library("C50")
setwd("C:/Users/Bernadka/Desktop/APU Artur/4")
dane <- read.csv('fridges.csv')
dane$Ocena <- factor(dane$Ocena)
head(dane)
treeModel <- C5.0(x=dane[,-6], y=dane$Ocena)
treeModel
summary(treeModel)
plot(treeModel)
summary(treeModel)
plot(treeModel)
plot(treeModel)
library("C50")
setwd("C:/Users/Bernadka/Desktop/APU Artur/4")
dane <- read.csv('fridges.csv')
dane$Ocena <- factor(dane$Ocena)
head(dane)
treeModel <- C5.0(x=dane[,-6], y=dane$Ocena)
treeModel
summary(treeModel)
plot(treeModel)
